{"mappings":"YAAA,IAkFQA,EACAC,EACAC,EACAC,EACAC,EAtFFC,EAAWC,SAASC,cAAc,cAClCC,EAAcF,SAASC,cAAc,gBACrCE,EAAcH,SAASC,cAAc,gBACrCG,EAAcJ,SAASC,cAAc,iBAErCI,GADSL,SAASC,cAAc,SACtBD,SAASC,cAAe,cAClCK,EAAeN,SAASC,cAAe,eACvCM,EAAcP,SAASC,cAAe,iBACtCO,EAAiBR,SAASC,cAAe,qBACzCQ,EAAkBT,SAASC,cAAe,uBAC1CS,EAAkBV,SAASC,cAAe,kBAC1CU,EAAkBX,SAASC,cAAe,uBAC1CW,EAAU,mCAEVC,EAAa,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACxDC,EAAS,CACb,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OAoDFC,UAAUC,YAAYC,oBA3BtB,SAAyBC,IAtBzB,SAAwBC,EAAUC,GAChC,IAAMC,EAAW,uDAAuEC,OAAhBH,EAAS,SAA0BG,OAAnBF,EAAU,WAAiBE,OAARV,EAAQ,iBAEnHW,MAAMF,GACHG,MAAK,SAAAC,GACJ,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAMC,OAElB,OAAOH,EAASI,M,IAEjBL,MAAK,SAAAM,GACJ,IAAMC,EAAU,oCAAyDT,OAArBQ,EAAKE,QAAQ,GAAGC,KAAK,QACzElC,EAASmC,mBAAoB,YAAYJ,EAAKK,MAC9CjC,EAAYkC,UAAY,GAA8Bd,OAA3Be,KAAKC,MAAMR,EAAKS,KAAKC,MAAM,QACtDrC,EAAYsC,YAAcX,EAAKE,QAAQ,GAAGU,YAC1CtC,EAAYuC,aAAa,MAAOZ,E,IAEjCa,OAAM,SAAAhB,GACLiB,QAAQC,IAAIlB,E,IAOhBmB,CAFiB7B,EAAS8B,OAAO7B,SACfD,EAAS8B,OAAO5B,U,IAIpC,WACE,IAAM6B,EAAU,6EAAqF3B,OAARV,GAC7FW,MAAM0B,GACHzB,MAAK,SAAAC,GACJ,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAMC,OAElB,OAAOH,EAASI,M,IAEjBL,MAAK,SAAAM,GACJ,IAAMC,EAAU,oCAAyDT,OAArBQ,EAAKE,QAAQ,GAAGC,KAAK,QACzElC,EAASmC,mBAAoB,YAAa,QAC1ChC,EAAYkC,UAAY,GAA8Bd,OAA3Be,KAAKC,MAAMR,EAAKS,KAAKC,MAAM,QACtDrC,EAAYsC,YAAcX,EAAKE,QAAQ,GAAGU,YAC1CtC,EAAYuC,aAAa,MAAOZ,E,IAEjCa,OAAM,SAAAhB,GACLiB,QAAQjB,MAAMA,E,OAOZlC,EAAO,IAAIwD,KACXvD,EAAYkB,EAAWnB,EAAKyD,UAC5BvD,EAAaF,EAAK0D,UAAUC,WAAWC,SAAS,EAAG,KACnDzD,EAAQiB,EAAOpB,EAAK6D,YACpBzD,EAAOJ,EAAK8D,cAClBnD,EAAQoC,YAAc9C,EACtBW,EAAa8B,UAAY,GAAiBd,OAAd1B,EAAW,KAAY0B,OAATzB,EAAM,KAAQyB,OAALxB,GAKrDU,EAAeiD,iBAAkB,SAAQ,WACvClD,EAAYmD,MAAMC,QAAU,OAC5BjD,EAAgBgD,MAAMC,QAAU,QAkBhC,SAASC,EAAeC,GACtB,IAAMC,EAAM,qDAA8ExC,OAAzBuC,EAAS1C,SAAS,SAAiCG,OAA1BuC,EAASzC,UAAU,SAAiBE,OAlB7G,oCAmBjB,OAAOC,MAAMuC,GACVtC,MAAK,SAAAC,G,OAAYA,EAASI,M,IAC1BL,MAAK,SAAAM,G,OAAQA,EAAKA,KAAKiC,MAAM,EAAG,E,IAnB5B,IAAIC,SAAQ,SAACC,EAASC,GAC3BnD,UAAUC,YAAYC,oBACpB,SAAAC,GACE+C,EAAQ,CACN9C,SAAUD,EAAS8B,OAAO7B,SAC1BC,UAAWF,EAAS8B,OAAO5B,W,IAG/B,SAAAQ,GACEsC,EAAOtC,E,OAwCXJ,MAAK,SAAAqC,G,OAAYD,EAAeC,E,IAChCjB,OAAM,W,OAAMgB,EAAe,CAAEzC,SAAU,WAAYC,UAAW,W,IAC9DI,MAAK,SAAA2C,G,OA7BT,SAA4BA,GAC1B,IAAMC,EAAoBD,EACvBE,KAAI,SAAAC,GACH,IAAM5E,EAAO,IAAIwD,KAAKoB,EAAIC,YAAYC,qBAChCC,EAAUH,EAAII,SACdC,EAAUL,EAAIM,SACdC,EAAkBP,EAAItC,QAAQU,YAC9BoC,EAAWR,EAAItC,QAAQC,KAC7B,MAAO,qIAIgCX,OAF+CwD,EAAS,uGAIvDxD,OAFD5B,EAAK,yGAI7B4B,OAFyBe,KAAKC,MACpCmC,GACA,QACgCnD,OADzBe,KAAKC,MAAMqC,GAAS,2DACqBrD,OAAhBuD,EAAgB,mE,IAKzDE,KAAK,IACRpE,EAAgByB,UAAYgC,C,CAMPY,CAAmBb,E,OAG5C1D,EAAgBgD,iBAAkB,SAAQ,WACxC/C,EAAgBgD,MAAMC,QAAU,OAChCpD,EAAYmD,MAAMC,QAAU,O","sources":["src/js/weather.js"],"sourcesContent":["const cityName = document.querySelector('.city-name');\nconst temperature = document.querySelector('.temperature');\nconst description = document.querySelector('.description');\nconst weatherIcon = document.querySelector('.weather-icon');\nconst dateEl = document.querySelector('.date');\nconst weekDay = document.querySelector(`.week-day`);\nconst monthAndYear = document.querySelector(`.month_year`);\nconst weatherCard = document.querySelector(`.weather-card`);\nconst weekWeatherBtn = document.querySelector(`.week-weather-btn`);\nconst todayWeatherBtn = document.querySelector(`.today-forecast-btn`);\nconst weekWeatherCard = document.querySelector(`.week-forecast`);\nconst weekWeatherList = document.querySelector(`.week-forecast-list`);\nconst API_KEY = 'e47ed3661eb61aefd3a2374eeeb0d76d';\n\nconst daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nconst months = [\n  'Jan',\n  'Feb',\n  'Mar',\n  'Apr',\n  'May',\n  'Jun',\n  'Jul',\n  'Aug',\n  'Sep',\n  'Oct',\n  'Nov',\n  'Dec',\n];\n\nfunction getWeatherData(latitude, longitude) {\n  const BASE_URL = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${API_KEY}&units=metric`;\n\n  fetch(BASE_URL)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(error);\n      }\n      return response.json();\n    })\n    .then(data => {\n      const iconUrl = `https://openweathermap.org/img/w/${data.weather[0].icon}.png`;\n      cityName.insertAdjacentHTML(`beforeend`, data.name);\n      temperature.innerHTML = `${Math.round(data.main.temp)}&deg`;\n      description.textContent = data.weather[0].description;\n      weatherIcon.setAttribute('src', iconUrl);\n    })\n    .catch(error => {\n      console.log(error);\n    });\n}\n\nfunction successCallback(position) {\n  const latitude = position.coords.latitude;\n  const longitude = position.coords.longitude;\n  getWeatherData(latitude, longitude);\n}\n\nfunction errorCallback() {\n  const urlKyiv = `https://api.openweathermap.org/data/2.5/weather?q=Kyiv&units=metric&appid=${API_KEY}`;\n  fetch(urlKyiv)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(error);\n      }\n      return response.json();\n    })\n    .then(data => {\n      const iconUrl = `https://openweathermap.org/img/w/${data.weather[0].icon}.png`;\n      cityName.insertAdjacentHTML(`beforeend`, `Kyiv`);\n      temperature.innerHTML = `${Math.round(data.main.temp)}&deg`;\n      description.textContent = data.weather[0].description;\n      weatherIcon.setAttribute('src', iconUrl);\n    })\n    .catch(error => {\n      console.error(error);\n    });\n}\n\nnavigator.geolocation.getCurrentPosition(successCallback, errorCallback);\n\nfunction displayDate() {\n  const date = new Date();\n  const dayOfWeek = daysOfWeek[date.getDay()];\n  const dayOfMonth = date.getDate().toString().padStart(2, '0');\n  const month = months[date.getMonth()];\n  const year = date.getFullYear();\n  weekDay.textContent = dayOfWeek;\n  monthAndYear.innerHTML = `${dayOfMonth} ${month} ${year}`;\n}\n\ndisplayDate();\n\nweekWeatherBtn.addEventListener(`click`, () => {\n  weatherCard.style.display = 'none';\n  weekWeatherCard.style.display = 'block';\n  const newApiKey = `494cc86ea4be4942a2ea7eae8a726091`;\n  function getCurrentLocation() {\n    return new Promise((resolve, reject) => {\n      navigator.geolocation.getCurrentPosition(\n        position => {\n          resolve({\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude,\n          });\n        },\n        error => {\n          reject(error);\n        }\n      );\n    });\n  }\n\n  function getWeatherData(location) {\n    const url = `https://api.weatherbit.io/v2.0/forecast/daily?lat=${location.latitude}&lon=${location.longitude}&key=${newApiKey}`;\n    return fetch(url)\n      .then(response => response.json())\n      .then(data => data.data.slice(0, 7));\n  }\n\n  function displayWeatherData(weatherData) {\n    const weekWeatherMarkup = weatherData\n      .map(day => {\n        const date = new Date(day.valid_date).toLocaleDateString();\n        const minTemp = day.min_temp;\n        const maxTemp = day.max_temp;\n        const descriptionWeek = day.weather.description;\n        const iconWeek = day.weather.icon;\n        return `\n            <li class=\"icon-item\">\n             <img class=\"week-weather-icon\" src=\"https://www.weatherbit.io/static/img/icons/${iconWeek}.png\">\n             <div class=\"week-weather-item\">\n              <div class=\"week-weather-date\">${date}</div>\n              <div class=\"week-weather-body\">\n               <div class=\"week-weather-temp\">${Math.round(\n                 minTemp\n               )}° / ${Math.round(maxTemp)}°</div>\n               <div class=\"week-weather-desc\">${descriptionWeek}</div>\n              </div>\n             </div>\n        </li>`;\n      })\n      .join('');\n    weekWeatherList.innerHTML = weekWeatherMarkup;\n  }\n\n  getCurrentLocation()\n    .then(location => getWeatherData(location))\n    .catch(() => getWeatherData({ latitude: '50.45466', longitude: '30.5238' }))\n    .then(weatherData => displayWeatherData(weatherData));\n});\n\ntodayWeatherBtn.addEventListener(`click`, () => {\n  weekWeatherCard.style.display = 'none';\n  weatherCard.style.display = 'block';\n});\n"],"names":["date","dayOfWeek","dayOfMonth","month","year","$b7c37e8f14632f7d$var$cityName","document","querySelector","$b7c37e8f14632f7d$var$temperature","$b7c37e8f14632f7d$var$description","$b7c37e8f14632f7d$var$weatherIcon","$b7c37e8f14632f7d$var$weekDay","$b7c37e8f14632f7d$var$monthAndYear","$b7c37e8f14632f7d$var$weatherCard","$b7c37e8f14632f7d$var$weekWeatherBtn","$b7c37e8f14632f7d$var$todayWeatherBtn","$b7c37e8f14632f7d$var$weekWeatherCard","$b7c37e8f14632f7d$var$weekWeatherList","$b7c37e8f14632f7d$var$API_KEY","$b7c37e8f14632f7d$var$daysOfWeek","$b7c37e8f14632f7d$var$months","navigator","geolocation","getCurrentPosition","position","latitude","longitude","BASE_URL","concat","fetch","then","response","ok","Error","error","json","data","iconUrl","weather","icon","insertAdjacentHTML","name","innerHTML","Math","round","main","temp","textContent","description","setAttribute","catch","console","log","$b7c37e8f14632f7d$var$getWeatherData","coords","urlKyiv","Date","getDay","getDate","toString","padStart","getMonth","getFullYear","addEventListener","style","display","getWeatherData1","location","url","slice","Promise","resolve","reject","weatherData","weekWeatherMarkup","map","day","valid_date","toLocaleDateString","minTemp","min_temp","maxTemp","max_temp","descriptionWeek","iconWeek","join","displayWeatherData"],"version":3,"file":"index.dcd54215.js.map"}